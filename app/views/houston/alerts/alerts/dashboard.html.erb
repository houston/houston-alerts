<h1>Alerts</h1>

<span class="label" id="alerts_count">0</span>

<table id="alerts"></table>

<a id="toggle_audio_btn"></a>

<%= content_for :javascripts do %>
<script type="text/javascript">
  $(function() {
    var $alerts = $('#alerts'),
        format = d3.format('02d'),
        dateFormat = d3.time.format('<span class="label">%a</span> %-I:%M%p'),
        soundEffects = <%=raw MultiJson.dump(Houston::Alerts.config.sounds) %>,
        $countdowns, $countdown, urgent, label, timeleft, seconds, minutes, hours, days, date,
        limit = <%= @limit %>,
        newAlertIds, lastAlertIds,
        COUNTDOWN_STARTS = 36000, // 10 hours in seconds
        shouldPlaySounds = <%= MultiJson.dump(params[:sounds] == "on") %>,
        $audioToggle = $('#toggle_audio_btn'),
        formatMinutes;

    function formatDate(date) {
      return dateFormat(date).replace(/([AP])M$/, function(_, ap) { return ap.toLowerCase(); })
    }

    function playSample(effectName) {
      if(shouldPlaySounds) {
        var paths = soundEffects[effectName];
        if(paths && paths.length) {
          var path = paths[Math.floor(Math.random() * paths.length)];
          console.log('[play] playing "' + effectName + '": ' + path);
          Houston.play(path);
        } else {
          console.log('[play] playing "' + effectName + '": no audio file');
        }
      }
    }

    function updateCountdowns() {
      $countdowns = $countdowns || $('.countdown');
      urgent = false;
      $countdowns.each(function() {
        $countdown = $(this);
        timeleft = +$countdown.attr('data-secondsleft') - 1;
        $countdown.attr('data-secondsleft', timeleft);
        $countdown.closest('tr').toggleClass('late', timeleft < 0);

        if(timeleft < COUNTDOWN_STARTS) {
          seconds = Math.abs(timeleft);
          minutes = Math.floor(seconds / 60);
          hours = Math.floor(minutes / 60);
          days = Math.floor(hours / 24);

          label = format(seconds % 60);
          formatMinutes = (seconds < 3600) ? Math.floor : format;
          if(minutes >= 1) label = formatMinutes(minutes % 60) + ':' + label;
          if(hours >= 1) label = Math.floor(hours % 24) + ':' + label;
          if(days >= 1) label = '<span class="label">' + Math.floor(days) + 'd</span> ' + label;
          if(timeleft < 0) label = '<span class="late">+ ' + label + '</span>';
          $countdown.html(label);

          if(timeleft < 1800) urgent = true; // less than 30 minutes to go or late
        } else {
          date = timeleft.seconds().after(new Date());
          $countdown.html(formatDate(date));
        }
      });
      $('body').toggleClass('red', urgent);
    }

    function renderAlerts(data) {
      var alertsByDate = _.chain(data.alerts)
        .groupBy(function(alert) { return alert.deadline.substr(0,10) })
        .map(function(alerts, date) { return {alerts: alerts}; })
        .value();

      $('#alerts').html(HandlebarsTemplates['houston/alerts/dashboard']({dates: alertsByDate}));
      $('body').toggleClass('green', data.count == 0);
      $('#alerts_count').html(data.count);
      $('title').html('Alerts (' + data.count + ')')

      newAlertIds = _.pluck(data.alerts, 'id');
      if(lastAlertIds) {
        if(lastAlertIds.length > 0 && newAlertIds.length === 0) {
          playSample('none');
        }
        if(_.difference(newAlertIds, lastAlertIds).length > 0) {
          playSample('new');
        }
      }
      lastAlertIds = newAlertIds;

      $countdowns = null;
      updateCountdowns();
    }

    setInterval(updateCountdowns, 1000);

    $audioToggle.click(function() {
      if($audioToggle.hasClass('audio-off')) {
        $audioToggle.removeClass('audio-off');
        $audioToggle.addClass('audio-on');
        shouldPlaySounds = true;
      } else {
        $audioToggle.removeClass('audio-on');
        $audioToggle.addClass('audio-off');
        shouldPlaySounds = false;
      }
    });

    if(shouldPlaySounds) {
      $audioToggle.addClass('audio-on');
    } else {
      $audioToggle.addClass('audio-off');
    }

    new Refresher()
      .container('#container')
      .interval(<%= params[:refresh].to_i > 0 ? params[:refresh].to_i : 45 %> * 1000) // in seconds
      .callback(function() {
        $.get('/alerts/dashboard' + window.location.search, {limit: limit}).done(renderAlerts);
      }).render();

    renderAlerts({
      alerts: <%=raw Houston::Alerts::AlertPresenter.new(@alerts).to_json %>,
      count: <%= @count %>
    });
  });
</script>
<% end %>
